console.log("üéÆ Service worker loaded");let e=!1;const t=new Set;let o=new Set,n=Date.now(),r=!1,a=!1,s=!0;const c=new Map;function i(){return new Promise((e=>{if(chrome.runtime.id)return void e(!0);const t=setInterval((()=>{chrome.runtime.id?(clearInterval(t),e(!0)):Date.now()-n>5e3&&(clearInterval(t),e(!1))}),100)}))}async function l(){try{if(await async function(e=5e3){const t=Date.now();for(;r;){if(Date.now()-t>e)throw new Error("Lock acquisition timeout");await new Promise((e=>setTimeout(e,100)))}r=!0}(),!await i())throw new Error("No SW");try{if(await chrome.offscreen.hasDocument()){console.log("üîç Found existing document, attempting cleanup");try{await chrome.offscreen.closeDocument(),await new Promise((e=>setTimeout(e,1e3)))}catch(e){console.log("Note: Close error during cleanup (expected):",e)}}}catch(e){console.log("Note: Document check error (expected):",e)}console.log("üìù Creating new offscreen document...");const e=new Promise(((e,t)=>{let o;const n=setTimeout((()=>{o&&chrome.runtime.onMessage.removeListener(o),t(new Error("Offscreen document ready timeout"))}),1e4);o=(t,r,a)=>"OFFSCREEN_READY"===t.type&&(clearTimeout(n),chrome.runtime.onMessage.removeListener(o),a({success:!0}),e(),!0),chrome.runtime.onMessage.addListener(o)}));await chrome.offscreen.createDocument({url:"offscreen.html",reasons:["DOM_SCRAPING"],justification:"Monitor gamepad inputs in background"}),console.log("üìÑ Offscreen document created, waiting for ready message...");try{await e,console.log("‚úÖ Offscreen document ready"),a=!0}catch(e){console.error("‚ùå Document ready timeout:",e);try{await chrome.offscreen.closeDocument()}catch(e){console.log("Note: Close error during cleanup:",e)}throw a=!1,new Error("Offscreen document failed to initialize")}}catch(e){throw console.error("‚ùå Error creating offscreen document:",e),a=!1,e}finally{r=!1}}async function m(){if(!e){console.log("üéÆ Service worker initializing");try{if(!await i())throw new Error("Service worker failed to initialize");let t=3;for(;t>0;)try{t<3&&await new Promise((e=>setTimeout(e,2e3))),await l();break}catch(e){console.error(`‚ùå Initialization attempt ${4-t}/3 failed:`,e),t--;try{await chrome.offscreen.closeDocument()}catch(e){}if(0===t)throw e}const{channelId:o}=await chrome.storage.sync.get("channelId");o&&(console.log("üîÑ Reinitializing channel:",o),setTimeout((()=>{chrome.runtime.sendMessage({type:"INIT_CHANNEL",channelId:o})}),1e3)),e=!0,console.log("‚úÖ Service worker initialized")}catch(t){console.error("‚ùå Initialization error:",t),e=!1,t.message.includes("Service worker")&&(console.log("üîÑ Scheduling reinitialization..."),setTimeout(m,2e3))}}}async function d(e){try{if(!await chrome.tabs.get(e))throw new Error("Tab does not exist");const o=c.get(e),n=Date.now();return o&&n-o<5e3?(console.log("‚è≥ Tab recently registered:",e),!0):(t.has(e)||(console.log("üìù Injecting content script into tab:",e),await chrome.scripting.executeScript({target:{tabId:e},files:["content.js"]}),await new Promise(((o,n)=>{const r=setTimeout((()=>{n(new Error("Content script registration timeout"))}),5e3),a=setInterval((()=>{t.has(e)&&(clearInterval(a),clearTimeout(r),o())}),100)}))),!0)}catch(e){return console.error("Failed to ensure content script:",e),!1}}async function u(e,o,n=3){let r=0;for(;r<n;)try{if(!await d(e))throw new Error("Could not load content script");const t=await Promise.race([new Promise(((t,n)=>{chrome.tabs.sendMessage(e,o,(e=>{chrome.runtime.lastError?n(chrome.runtime.lastError):t(e)}))})),new Promise(((e,t)=>setTimeout((()=>t(new Error("Send timeout"))),2e3)))]);return console.log("‚úÖ Message sent successfully to tab:",e),t}catch(o){if(r++,console.log(`‚ùå Attempt ${r}/${n} failed for tab ${e}:`,o),t.delete(e),!(r<n))throw o;console.log("‚è≥ Waiting 1000ms before retry..."),await new Promise((e=>setTimeout(e,1e3)))}}async function h(e){if(!1===(await chrome.storage.sync.get(["enabled"])).enabled){console.log("üõë Monitoring is currently disabled");const e=await chrome.tabs.query({url:["https://livestreaming.tools/*","http://localhost:3000/*"]});return await Promise.allSettled(e.map((async e=>{if(e.id)try{await u(e.id,{type:"MONITORING_STATE_CHANGED",enabled:!1})}catch(e){console.log("Failed to notify tab of disabled state:",e)}}))),null}const n=function(e){const t=`gamepad:${e}`;return console.log("Generated channel ID:",t),t}(e);if(await chrome.storage.sync.set({channelId:n}),console.log("üéÆ Channel setup for user:",e,"with ID:",n),a||(console.log("‚è≥ Creating offscreen document..."),await l()),!a)throw new Error("Offscreen document not ready");try{const r=await new Promise(((e,t)=>{const o=setTimeout((()=>{t(new Error("INIT_CHANNEL timeout"))}),5e3);chrome.runtime.sendMessage({type:"INIT_CHANNEL",channelId:n},(n=>{clearTimeout(o),chrome.runtime.lastError?t(chrome.runtime.lastError):e(n)}))}));console.log("‚úÖ INIT_CHANNEL response:",r);const a=await chrome.tabs.query({url:["https://livestreaming.tools/*","http://localhost:3000/*"]}),s=async r=>{if(r.id)try{await u(r.id,{type:"CHANNEL_READY",channelId:n,username:e}),console.log("‚úÖ Sent channel ready to tab:",r.id)}catch(e){console.error("üíî Failed to send channel ready to tab:",r.id,e),t.delete(r.id),o.add(r.id)}};return await Promise.allSettled(a.map(s)),n}catch(t){if(console.error("‚ùå Failed to initialize channel:",t),t.message.includes("Receiving end does not exist")){a=!1;try{return await l(),h(e)}catch(e){throw console.error("Failed to recreate offscreen document:",e),t}}throw t}}async function g(e){const t=new OffscreenCanvas(e,e).getContext("2d"),o=await fetch(chrome.runtime.getURL(`icons/icon${e}.png`)),n=await o.blob(),r=await createImageBitmap(n);t.drawImage(r,0,0);const a=t.getImageData(0,0,e,e),s=a.data;for(let e=0;e<s.length;e+=4){const t=(s[e]+s[e+1]+s[e+2])/3;s[e]=t,s[e+1]=t,s[e+2]=t,s[e+3]=Math.floor(.5*s[e+3])}return a}!async function(){const e=await chrome.storage.sync.get(["enabled"]);if(s=!1!==e.enabled,s)await m();else try{await chrome.offscreen.hasDocument()&&await chrome.offscreen.closeDocument()}catch(e){console.error("Error closing offscreen document:",e)}await w(s)}(),chrome.runtime.onInstalled.addListener((async()=>{n=Date.now(),await m()})),chrome.runtime.onStartup.addListener((async()=>{n=Date.now(),await m()})),(async()=>{n=Date.now(),await m()})(),chrome.runtime.onSuspend.addListener((()=>{console.log("üîÑ Extension being reloaded"),e=!1,t.clear(),o.clear(),n=Date.now()})),chrome.runtime.onMessage.addListener((async(e,n,r)=>{if(console.log("üì® Received message:",e,"from:",n),"PING"===e.type)return r({success:!0}),!0;if("CONTENT_SCRIPT_READY"===e.type){const e=n.tab?.id;if(!e)return;const a=c.get(e),s=Date.now();return a&&s-a<5e3?(console.log("‚è≥ Ignoring duplicate registration for tab:",e),r({success:!1,error:"Already registered"}),!0):(console.log("üìù Content script ready in tab:",e),t.add(e),o.delete(e),c.set(e,s),r({success:!0}),!0)}if("GAMEPAD_STATE"===e.type&&!s)return r({success:!0}),!0;if("CONSOLE"===e.type){const t="üìÑ [Offscreen]";console[e.logType](t,...e.args),r({success:!0})}return!0})),chrome.runtime.onMessageExternal.addListener((async(e,t,o)=>{if(console.log("üì® External message:",e,"from:",t.origin),"https://livestreaming.tools"===t.origin||"http://localhost:3000"===t.origin)switch(e.type){case"SETUP_GAMEPAD_CHANNEL":try{console.log("üéÆ Setting up channel for:",e.username);const t=await h(e.username);null===t?o({success:!0,disabled:!0,message:"Monitoring is currently disabled"}):(console.log("‚úÖ Channel setup successful:",t),o({success:!0,channelId:t}))}catch(e){console.error("‚ùå Channel setup failed:",e),o({success:!1,error:e.message})}break;case"GET_EXTENSION_ID":console.log("üÜî Sending extension ID"),o({id:chrome.runtime.id,success:!0});break;default:console.log("‚ùì Unknown message type:",e.type),o({success:!1,error:"Unknown message type"})}else console.log("‚ö†Ô∏è Unauthorized sender:",t.origin),o({success:!1,error:"Unauthorized sender"});return!0})),setInterval((async()=>{chrome.runtime.getPlatformInfo((()=>{})),await chrome.offscreen.hasDocument()||(console.log("üîÑ Recreating offscreen document"),l())}),2e4),chrome.tabs.onRemoved.addListener((e=>{t.delete(e),o.delete(e),c.delete(e),console.log("üßπ Cleaned up tab:",e)})),chrome.tabs.onUpdated.addListener(((e,t)=>{"complete"===t.status&&(o.delete(e),c.delete(e))})),chrome.runtime.onUpdateAvailable.addListener((()=>{console.log("üîÑ Extension update available, cleaning up...");try{chrome.offscreen.closeDocument()}catch(e){console.log("Note: Cleanup error (expected):",e)}}));let f=null;async function w(e){try{if(e)chrome.action.setIcon({path:{16:"icons/icon16.png",32:"icons/icon32.png",48:"icons/icon48.png",128:"icons/icon128.png"}});else{const e=await async function(){if(f)return f;const e=[16,32,48,128],t={};for(const o of e)t[o]=await g(o);return f=t,t}();chrome.action.setIcon({imageData:{16:e[16],32:e[32],48:e[48],128:e[128]}})}}catch(e){console.error("Failed to update icon:",e)}}chrome.runtime.onMessage.addListener(((t,o,n)=>"TOGGLE_MONITORING"===t.type?(s=t.enabled,chrome.storage.sync.set({enabled:s}),n({success:!0}),(async()=>{try{await w(s),s?await m():(await chrome.offscreen.hasDocument()&&await chrome.offscreen.closeDocument(),a=!1,e=!1);const t=await chrome.tabs.query({url:["https://livestreaming.tools/*","http://localhost:3000/*"]});for(const e of t)if(e.id)try{await chrome.tabs.sendMessage(e.id,{type:"MONITORING_STATE_CHANGED",enabled:s})}catch(t){console.error("Failed to notify tab:",e.id,t)}}catch(e){console.error("Error handling toggle:",e)}})(),!0):"GAMEPAD_STATE"!==t.type||s?void 0:(n({success:!0}),!0))),chrome.runtime.onMessage.addListener(((e,t,o)=>{if("GAMEPAD_STATE"===e.type)return chrome.tabs.query({url:["https://livestreaming.tools/*","http://localhost:3000/*"]},(t=>{t.forEach((t=>{t.id&&chrome.tabs.sendMessage(t.id,{type:"GAMEPAD_STATE",state:e.state,timestamp:Date.now()}).catch((e=>{console.error("Failed to send gamepad state to tab:",e)}))}))})),o({success:!0}),!0}));