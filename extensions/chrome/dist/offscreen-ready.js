function isContextValid(){try{return chrome.runtime.getURL(""),!0}catch(e){return console.error("[Offscreen] Context validation failed:",e),!1}}function formatError(e){return{message:e.message,name:e.name,stack:e.stack,toString:e.toString()}}async function sendReadyMessage(e=3){let n=0;for(;n<e;)try{return await new Promise(((e,n)=>{if(!isContextValid())return void n(new Error("Extension context invalid"));const s={type:"OFFSCREEN_READY",timestamp:Date.now()};chrome.runtime.sendMessage(s,(s=>{chrome.runtime.lastError?n(chrome.runtime.lastError):e(s)}))})),void console.log("[Offscreen] Ready message sent successfully")}catch(s){n++,console.log(`[Offscreen] Attempt ${n}/${e} failed:`,s.message),n<e&&await new Promise((e=>setTimeout(e,1e3*n)))}}console.log("[Offscreen] Ready script starting"),async function(){try{await sendReadyMessage(),console.log("[Offscreen] Initialization successful")}catch(e){console.error("[Offscreen] Initialization failed:",e)}}(),chrome.runtime.onMessage.addListener(((e,n,s)=>{if(console.log("[Offscreen] Received message:",e.type),"PING"===e.type)return s({success:!0,timestamp:Date.now()}),!1;if("INIT_CHANNEL"===e.type){try{window.channelId=e.channelId,s({success:!0,channelId:e.channelId})}catch(e){s({success:!1,error:e.message})}return!1}return s({success:!1,error:"Unknown message type"}),!1})),window.addEventListener("unload",(()=>{console.log("[Offscreen] Document unloading")})),console.log("[Offscreen] Message handlers initialized");