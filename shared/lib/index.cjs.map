{"version":3,"sources":["../src/env.ts"],"names":["z"],"mappings":";;;;;;AAGa,IAAA,iBAAA,GAAoBA,MAAE,MAAO,CAAA;AAAA,EACxC,YAAc,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EAC7B,kBAAA,EAAoBA,MAAE,MAAO,EAAA;AAAA,EAC7B,0BAAA,EAA4BA,MAAE,MAAO,EAAA;AAAA,EACrC,iBAAmB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EAClC,sBAAA,EAAwBA,MAAE,MAAO,EAAA;AAAA,EACjC,gCAAA,EAAkCA,MAAE,MAAO;AAC7C,CAAC;AAGY,IAAA,gBAAA,GAAmBA,MAAE,MAAO,CAAA;AAAA,EACvC,0BAAA,EAA4BA,MAAE,MAAO,EAAA;AAAA,EACrC,gBAAA,EAAkBA,MAAE,MAAO,EAAA;AAAA,EAC3B,YAAc,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EAC7B,yBAAA,EAA2BA,MAAE,MAAO,EAAA;AAAA,EACpC,iBAAA,EAAmBA,MAAE,MAAO,EAAA;AAAA,EAC5B,qBAAA,EAAuBA,MAAE,MAAO,EAAA;AAAA,EAChC,oBAAsB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EACrC,gBAAA,EAAkBA,MAAE,MAAO,EAAA;AAAA,EAC3B,oBAAA,EAAsBA,MAAE,MAAO,EAAA;AAAA,EAC/B,mBAAqB,EAAAA,KAAA,CAAE,MAAO,EAAA,CAAE,GAAI,EAAA;AAAA,EACpC,IAAA,EAAMA,KAAE,CAAA,MAAA,EAAS,CAAA,EAAA,CAAGA,MAAE,MAAO,EAAC,CAAE,CAAA,SAAA,CAAU,MAAM,CAAA;AAAA,EAChD,UAAUA,KAAE,CAAA,IAAA,CAAK,CAAC,aAAe,EAAA,YAAA,EAAc,MAAM,CAAC;AACxD,CAAC;AAGY,IAAA,SAAA,GAAYA,MAAE,MAAO,CAAA;AAAA,EAChC,GAAG,iBAAkB,CAAA,KAAA;AAAA,EACrB,GAAG,gBAAiB,CAAA;AACtB,CAAC;AAMM,SAAS,oBAAoB,GAA8B,EAAA;AAChE,EAAO,OAAA,iBAAA,CAAkB,MAAM,GAAG,CAAA;AACpC;AAFgB,MAAA,CAAA,mBAAA,EAAA,qBAAA,CAAA;AAKT,SAAS,mBAAmB,GAA8B,EAAA;AAC/D,EAAO,OAAA,gBAAA,CAAiB,MAAM,GAAG,CAAA;AACnC;AAFgB,MAAA,CAAA,kBAAA,EAAA,oBAAA,CAAA","file":"index.cjs","sourcesContent":["import { z } from \"zod\";\r\n\r\n// Frontend env schema\r\nexport const frontendEnvSchema = z.object({\r\n  VITE_API_URL: z.string().url(),\r\n  VITE_WEBSOCKET_URL: z.string(),\r\n  VITE_CLERK_PUBLISHABLE_KEY: z.string(),\r\n  VITE_SUPABASE_URL: z.string().url(),\r\n  VITE_SUPABASE_ANON_KEY: z.string(),\r\n  VITE_PUBLIC_GOOGLE_FONTS_API_KEY: z.string(),\r\n});\r\n\r\n// Backend env schema\r\nexport const backendEnvSchema = z.object({\r\n  CLERK_JWT_VERIFICATION_KEY: z.string(),\r\n  CLERK_SECRET_KEY: z.string(),\r\n  DATABASE_URL: z.string().url(),\r\n  SUPABASE_SERVICE_ROLE_KEY: z.string(),\r\n  SPOTIFY_CLIENT_ID: z.string(),\r\n  SPOTIFY_CLIENT_SECRET: z.string(),\r\n  SPOTIFY_REDIRECT_URI: z.string().url(),\r\n  TWITCH_CLIENT_ID: z.string(),\r\n  TWITCH_CLIENT_SECRET: z.string(),\r\n  TWITCH_REDIRECT_URI: z.string().url(),\r\n  PORT: z.string().or(z.number()).transform(String),\r\n  NODE_ENV: z.enum([\"development\", \"production\", \"test\"]),\r\n});\r\n\r\n// Combined schema for type inference\r\nexport const envSchema = z.object({\r\n  ...frontendEnvSchema.shape,\r\n  ...backendEnvSchema.shape,\r\n});\r\n\r\n// Export environment type\r\nexport type Environment = z.infer<typeof envSchema>;\r\n\r\n// Helper to validate frontend env\r\nexport function validateFrontendEnv(env: Record<string, unknown>) {\r\n  return frontendEnvSchema.parse(env);\r\n}\r\n\r\n// Helper to validate backend env\r\nexport function validateBackendEnv(env: Record<string, unknown>) {\r\n  return backendEnvSchema.parse(env);\r\n}\r\n"]}