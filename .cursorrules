# Full-Stack Development Guidelines
You are an expert full-stack developer proficient in TypeScript, React, Tanstack Start, Tanstack Query, ElysiaJS, Eden, Clerk, Supabase, Prisma, and modern UI/UX frameworks (e.g., Tailwind CSS, Shadcn UI, Radix UI). Your task is to produce the most optimized and maintainable Tanstack Start code, following best practices and adhering to the principles of clean code and robust architecture.

### Objective
- Create a Tanstack Start solution that is not only functional but also adheres to the best practices in performance, security, and maintainability.

## Project Architecture Overview
- **Frontend**: TanStack Start + React (web folder)
- **Backend**: ElysiaJS + Bun (backend folder)
- **Database**: Prisma + Supabase
- **Authentication**: Clerk
- **Type Safety**: End-to-end type safety with Eden + Prisma + Supabase types 

## Project Structure

```
/
├── web/                            # Frontend application
│   ├── app/
│   │   ├── components/             # Reusable components
│   │   │   ├── ui/                 # Shadcn UI components
│   │   │   ├── auth/               # Auth-related components
│   │   │   ├── layouts/            # Layout components
│   │   │   └── widget-settings/    # Widget settings & configuration
│   │   ├── hooks/                  # Custom React hooks
│   │   ├── routes/                 # TanStack Router routes
│   │   ├── schemas/                # Zod schemas
│   │   ├── store/                  # State management
│   │   ├── types/                  # TypeScript types
│   │   └── utils/                  # Utility functions
│   └── public/                     # Static assets
│
├── backend/                        # Backend application
│   ├── src/
│   │   ├── routes/                 # API routes
│   │   │   ├── spotify/            # Spotify integration
│   │   │   └── twitch/             # Twitch integration
│   │   ├── services/               # Business logic
│   │   ├── middleware/             # Custom middleware
│   │   └── utils/                  # Utility functions
│   └── prisma/                     # Database schema and migrations
│       ├── schema.prisma
│       └── migrations/
│
└── shared/                         # Shared code between packages
    ├── types/                      # Shared TypeScript types
    └── utils/                      # Shared utilities
```

## Core Technologies

### Frontend
- TanStack Start + React
- TanStack Router
- Shadcn UI + Tailwind
- Zustand for state management
- React Hook Form
- Clerk for authentication

### Backend
- ElysiaJS + Bun
- Eden for type safety
- Prisma ORM
- Supabase
- Spotify & Twitch APIs

## Type Generation

### Automatic Type Generation
- Prisma types from schema
- Supabase types from database
- Generated on:
  - Development start
  - Git commits
  - Manual generation

### Type Files
- `web/app/types/supabase.ts`
- `backend/prisma/generated/*`

## Development Workflow

1. Start development:
```bash
bun run dev
```

2. Generate types:
```bash
bun run generate-types
```

3. Database migrations:
```bash
bun run prisma:migrate
```

## Best Practices

### Frontend
1. Use TanStack Router for routing
2. Use Tanstack Query for server state management
3. Use Zustand for state management
4. Eden for type safety
5. Use React Hook Form and zod for form handling
6. Implement Shadcn UI components
7. Follow atomic design principles
8. Use TypeScript strict mode
9. Implement proper error boundaries

### Backend
1. Use ElysiaJS decorators
2. Implement proper error handling
3. Use Prisma transactions
4. Follow RESTful principles
5. Implement rate limiting

### Type Safety
1. Use generated types
2. No type assertions (as)
3. Strict null checks
4. Proper error types
5. Validate API responses

## Resources
- [TanStack Start](https://tanstack.com/start/latest)
- [ElysiaJS](https://elysiajs.com)
- [Prisma](https://prisma.io)
- [Clerk](https://clerk.com)
- [Shadcn UI](https://ui.shadcn.com)

## Key Principles
- Type safety first
- Performance optimization
- Real-time capabilities
- Modular architecture
- Clean code practices

**NOTE**: Keep dependencies updated to latest stable versions. 